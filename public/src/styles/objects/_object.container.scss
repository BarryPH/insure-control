

// --------------------------------------------------------------------------
//   CONTAINER OBJECT
// --------------------------------------------------------------------------


//@function container-width($width: 'lg') {
//	@return map-get($container-max-widths, $width);
//}

@mixin containerWidth(
    $padded: true,
    $width: container-width(lg)
) {

    @if $padded {
        height: inherit;
        //max-width: $width + ($gutterSpace * 2);
        max-width: calc( #{$width} + (#{$gutterSpace} * 2) );
        padding-left: $gutterSpace;
        padding-right: $gutterSpace;
        
        //@include media-breakpoint-up(lg) {
        //    max-width: $width + ($gutterSpace * 4);
        //    padding-left: $gutterSpace * 2;
        //    padding-right: $gutterSpace * 2;
        //}
        
    } @else {
        max-width: $width;
    }
}

@mixin containerFrame() {
    @include clearfix();
    margin-left: auto;
    margin-right: auto;
    position: relative;

    p,
    li,
    ol {
        &:last-child,
        &:last-child a {
            margin-bottom: 0;
        }
    }
}


.o-container {
    @include containerFrame();
    @include containerWidth();

    // widths
    &--xs {
        @include containerWidth( $width: container-width(xs) );
    }

    &--sm {
        @include containerWidth( $width: container-width(sm) );
    }

    &--rg {
        @include containerWidth( $width: container-width(rg) );
    }

    &--md {
        @include containerWidth( $width: container-width(md) );
    }

    &--xl {
        @include containerWidth( $width: container-width(xl) );
    }
    
    // insets like instrument.com
    &--tuck {
        padding-left: $windowSpace;
        padding-right: $windowSpace;

        @include media-breakpoint-up(xl) {
            padding-left: $windowSpaceLg;
            padding-right: $windowSpaceLg;
        }
    }
}



// Window modifier
// 1. Mainly used to wrap a hero image so it bleeds at mobile.
// --------------------------------------------------------------------------

@mixin containerWindow() {
    //padding: 21px $gutterSpace * 0.5 20px;
    padding: 21px $gutterSpace 20px;
    //@include media-breakpoint-up(sm) { padding: 21px $gutterSpace * 0.75 20px; }
}

.c-container--window {
    @include containerWindow();
}



// Bleed modifier
// Mainly used to wrap a hero image so it bleeds at mobile.
// --------------------------------------------------------------------------

@mixin containerMobileBleed(
    $breakpoint: md
) {
    margin-left: -#{$gutterSpace};
    margin-right: -#{$gutterSpace};

    > * {
        max-width: initial;
        width: 100%;
    }    

    //@include media-breakpoint-between(lg, lg-plus) {
    //    margin-left: -#{$gutterSpace * 2};
    //    margin-right: -#{$gutterSpace * 2};
    //}

    @include media-breakpoint-up($breakpoint) {
        margin-left: auto;
        margin-right: auto;
    }
}

.o-container--xs.o-container--mobileBleed { @include containerMobileBleed(sm); }
.o-container--sm.o-container--mobileBleed { @include containerMobileBleed(md); }
.o-container--md.o-container--mobileBleed { @include containerMobileBleed(lg); }


// inset
@mixin containerMobileBleedInset(
    $breakpoint: md
) {
    padding: 0 $gutterSpace;
    @include media-breakpoint-up($breakpoint) { padding: 0; }
}

.o-container--xs .o-container--mobileBleed-inset { @include containerMobileBleedInset(sm); }
.o-container--sm .o-container--mobileBleed-inset { @include containerMobileBleedInset(md); }
.o-container--md .o-container--mobileBleed-inset { @include containerMobileBleedInset(lg); }
